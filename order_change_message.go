/* 
 * Betfair: Exchange Streaming API
 *
 * API to receive streamed updates. This is an ssl socket connection of CRLF delimited json messages (see RequestMessage & ResponseMessage)
 *
 * OpenAPI spec version: 1.0.1423
 * Contact: bdp@betfair.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swagger

type OrderChangeMessage struct {

	// The operation type
	Op string `json:"op,omitempty"`

	// Client generated unique id to link request with response (like json rpc)
	Id int32 `json:"id,omitempty"`

	// Change Type - set to indicate the type of change - if null this is a delta)
	Ct string `json:"ct,omitempty"`

	// Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
	Clk string `json:"clk,omitempty"`

	// Heartbeat Milliseconds - the heartbeat rate (may differ from requested: bounds are 500 to 30000)
	HeartbeatMs int64 `json:"heartbeatMs,omitempty"`

	// Publish Time (in millis since epoch) that the changes were generated
	Pt int64 `json:"pt,omitempty"`

	// OrderMarketChanges - the modifications to account's orders (will be null on a heartbeat
	Oc []OrderMarketChange `json:"oc,omitempty"`

	// Token value (non-null) should be stored and passed in a MarketSubscriptionMessage to resume subscription (in case of disconnect)
	InitialClk string `json:"initialClk,omitempty"`

	// Conflate Milliseconds - the conflation rate (may differ from that requested if subscription is delayed)
	ConflateMs int64 `json:"conflateMs,omitempty"`

	// Segment Type - if the change is split into multiple segments, this denotes the beginning and end of a change, and segments in between. Will be null if data is not segmented
	SegmentType string `json:"segmentType,omitempty"`

	// Stream status: set to null if the exchange stream data is up to date and 503 if the downstream services are experiencing latencies
	Status int32 `json:"status,omitempty"`
}
